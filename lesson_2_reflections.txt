What happens when you initialize a repository? Why do you need to do it?
	Git becomes able to track it. This is necessary so that you can start doing version control on the files in the repository when you start working in them.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	You can specify individual files from the working directory to be commited into the repository. This allows you more freedom whith your decisions.

How can you use the staging area to make sure you have one commit per logical
change?
	Commit changed files one after another instead of simultaneously.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	They can let you try different versions (e.g. languages, difficulties) of the same program.

How do the diagrams help you visualize the branch structure?
	They show you where new branches branch off.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	The specified branch gets merged into the current one. It's represented in the diagram as two branches combinig into one because the new one has two parents.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
	Pros: You don't have to do that much when it works. You can test out new features before merging them.
	Cons: If there is a conflict, you have to remove it yourself. Some automatic merges might introduce unintended/unexpected changes.
